"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DockerfileContent = void 0;
exports.getItzgMinecraftServerImage = getItzgMinecraftServerImage;
class DockerfileContent {
    constructor(options) {
        this.options = options;
    }
    getOptions() {
        return this.options;
    }
    toString() {
        let dockerfileContent;
        dockerfileContent = "# This Dockerfile was generated by BastionRest\n";
        if (this.options.from) {
            dockerfileContent += "# " + (this.options.from.description ? this.options.from.description.join("\n# ") : "") + "\n";
            dockerfileContent += `FROM ${this.options.from.image}\n\n`;
        }
        if (this.options.copy) {
            dockerfileContent += "# " + (this.options.copy.description ? this.options.copy.description : "") + "\n";
            this.options.copy.copies.forEach(copy => {
                dockerfileContent += `COPY ${copy.from} ${copy.to}\n`;
            });
            dockerfileContent += "\n";
        }
        if (this.options.environment) {
            dockerfileContent += "# " + (this.options.environment.description ? this.options.environment.description : "") + "\n";
            this.options.environment.environment.forEach(env => {
                dockerfileContent += `ENV ${env.key}=${env.value}\n`;
            });
            dockerfileContent += "\n";
        }
        if (this.options.volumes) {
            dockerfileContent += "# " + (this.options.volumes.description ? this.options.volumes.description : "") + "\n";
            this.options.volumes.volumes.forEach(volume => {
                dockerfileContent += `VOLUME ${volume}\n`;
            });
            dockerfileContent += "\n";
        }
        if (this.options.commands) {
            dockerfileContent += "# " + (this.options.commands.description ? this.options.commands.description : "") + "\n";
            dockerfileContent += "CMD [" + this.options.commands.commands.map(command => `"${command}"`).join(", ") + "]\n";
        }
        return dockerfileContent;
    }
}
exports.DockerfileContent = DockerfileContent;
function getItzgMinecraftServerImage(version) {
    return "itzg/minecraft-server:java17-alpine";
}
